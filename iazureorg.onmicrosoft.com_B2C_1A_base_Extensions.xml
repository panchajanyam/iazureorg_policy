<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                      xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                      xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
                      PolicySchemaVersion="0.3.0.0" TenantId="iazureorg.onmicrosoft.com" 
                      PolicyId="B2C_1A_base_extensions" PublicPolicyUri="https://www.gazure.com">
	<BasePolicy>
		<TenantId>iazureorg.onmicrosoft.com</TenantId>
		<PolicyId>B2C_1A_base</PolicyId>
	</BasePolicy>
	<BuildingBlocks>
		<ClaimsSchema>
			<ClaimType Id="Loyalty">
				<DisplayName>Loyalty number</DisplayName>
				<DataType>string</DataType>
				<UserHelpText />
				<UserInputType>TextBox</UserInputType>
				<Restriction>
					<Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The loyalty number you provided is not valid. It must begin with an alphabet or number and can contain alphabets, numbers and the following symbols: _ -" />
				</Restriction>
			</ClaimType>
		</ClaimsSchema>

		<ContentDefinitions>
			<ContentDefinition Id="api.signuporsignin">
				<LoadUri>https://b2cauthstore.blob.core.windows.net/b2cdemotools/wingtiptoys/unified.html</LoadUri>
			</ContentDefinition>
			<ContentDefinition Id="api.localaccountsignup">
				<LoadUri>https://b2cauthstore.blob.core.windows.net/b2cdemotools/wingtiptoys/selfasserted.html</LoadUri>
			</ContentDefinition>
			<ContentDefinition Id="api.phonefactor">
				<LoadUri>https://b2cauthstore.blob.core.windows.net/b2cdemotools/wingtiptoys/phonefactor.html</LoadUri>
			</ContentDefinition>
			<ContentDefinition Id="api.selfasserted">
				<LoadUri>https://b2cauthstore.blob.core.windows.net/b2cdemotools/wingtiptoys/selfasserted.html</LoadUri>
			</ContentDefinition>
		</ContentDefinitions>
	</BuildingBlocks>
	<!--
        A list of all the claim providers that can be used in the technical policies. If a claims provider is not listed 
        in this section, then it cannot be used in a technical policy.
    -->
	<ClaimsProviders>
		<ClaimsProvider>
			<DisplayName>Loyalty Rest Api</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="LoyaltyRest">
					<DisplayName>Restful Claims Provider</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<!--<InputTokenFormat>JWT</InputTokenFormat>-->
					<Metadata>
						<Item Key="userinfo_endpoint">http://b2cauthapi.azurewebsites.net/api/loyalty</Item>
						<Item Key="AuthenticationType">Basic</Item>
						<Item Key="SendClaimsIn">Body</Item>
						<Item Key="issuer">http://b2cauthapi.azurewebsites.net/</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="BasicAuthenticationUsername" StorageReferenceId="B2cRestClientId" />
						<Key Id="BasicAuthenticationPassword" StorageReferenceId="B2cRestClientSecret" />
					</CryptographicKeys>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="userid" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="Loyalty" PartnerClaimType="LoyaltyNumber" />
					</OutputClaims>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
				<TechnicalProfile Id="LoyaltyRest-Header">
					<DisplayName>Restful Claims Provider</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<!--<InputTokenFormat>JWT</InputTokenFormat>-->
					<Metadata>
						<Item Key="userinfo_endpoint">http://www.gazure.com/api/loyalty</Item>
						<Item Key="AuthenticationType">Basic</Item>
						<Item Key="SendClaimsIn">Header</Item>
						<Item Key="issuer">http://www.gazure.com/</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="BasicAuthenticationUsername" StorageReferenceId="B2cRestClientId" />
						<Key Id="BasicAuthenticationPassword" StorageReferenceId="B2cRestClientSecret" />
					</CryptographicKeys>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="userid" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="Loyalty" PartnerClaimType="LoyaltyNumber" />
					</OutputClaims>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
				<TechnicalProfile Id="LoyaltyRest-Form">
					<DisplayName>Restful Claims Provider</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<!--<InputTokenFormat>JWT</InputTokenFormat>-->
					<Metadata>
						<Item Key="userinfo_endpoint">http://www.gazure.org/api/loyalty</Item>
						<Item Key="AuthenticationType">Basic</Item>
						<Item Key="SendClaimsIn">Form</Item>
						<Item Key="issuer">http://www.gazure.com/</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="BasicAuthenticationUsername" StorageReferenceId="B2cRestClientId" />
						<Key Id="BasicAuthenticationPassword" StorageReferenceId="B2cRestClientSecret" />
					</CryptographicKeys>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="userid" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="Loyalty" PartnerClaimType="LoyaltyNumber" />
					</OutputClaims>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
		<ClaimsProvider>
			<DisplayName>IdentityServer</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="IdentityServer">
					<DisplayName>IdentityServer</DisplayName>
					<Description>IdentityServer</Description>
					<Protocol Name="OpenIdConnect" />
					<OutputTokenFormat>JWT</OutputTokenFormat>
					<Metadata>
						<Item Key="METADATA">http://gazurex.azurewebsites.net/identity/.well-known/openid-configuration</Item>
						<Item Key="ProviderName">https://www.gazure.com/identity</Item>
						<Item Key="client_id">https://login.microsoftonline.com/te/iazureorg</Item>
						<Item Key="BearerTokenTransmissionMethod">AuthorizationHeader</Item>
						<Item Key="scope">openid userdetails</Item>
						<Item Key="HttpBinding">POST</Item>
						<Item Key="response_types">code</Item>
						<Item Key="IdTokenAudience">https://login.microsoftonline.com/te/iazureorg</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="client_secret" StorageReferenceId="B2CAuthClientSecret" />
					</CryptographicKeys>
					<InputClaims />
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="oid" />
						<OutputClaim ClaimTypeReferenceId="identityProvider" PartnerClaimType="idp" DefaultValue="B2CAuth" />
						<OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
						<OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name" />
						<OutputClaim ClaimTypeReferenceId="email" />
						<OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
						<OutputClaim ClaimTypeReferenceId="sub" Required="true" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
						<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
						<OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
						<OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
					</OutputClaimsTransformations>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
     <ClaimsProvider>
      <DisplayName>Ducttape</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="ADFS-WSFED-Outbound">
          <DisplayName>Ducttape ADFS</DisplayName>
          <Description>Ducttape ADFS</Description>
          <Protocol Name="WsFed" />
          <Metadata>

            <Item Key="PartnerEntity">https://fs.gazure.com/FederationMetadata/2007-06/FederationMetadata.xml</Item>

          </Metadata>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="privatepersonalidentifier" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="ADFS" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="CommonName" />
            <OutputClaim ClaimTypeReferenceId="sub" PartnerClaimType="UPN" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="enterpriseIdp" />
          </OutputClaims>
		  <OutputClaimsTransformations>
			<OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
			<OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
			<OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
			<OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
		  </OutputClaimsTransformations>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
	</ClaimsProviders>
	<UserJourneys>
		<UserJourney Id="SignUpOrSignInWithRestAndIdp">
			<AssuranceLevel>LOA1</AssuranceLevel>
			<PreserveOriginalAssertion>false</PreserveOriginalAssertion>
			<OrchestrationSteps>
				<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
					<ClaimsProviderSelections>
						<ClaimsProviderSelection TargetClaimsExchangeId="FacebookExchange" />
						<ClaimsProviderSelection TargetClaimsExchangeId="SignUpWithLogonEmailExchange" />
						<ClaimsProviderSelection TargetClaimsExchangeId="IdentifyServerExchange" />
<!---->						<ClaimsProviderSelection TargetClaimsExchangeId="AdfsExchange" /> 
					</ClaimsProviderSelections>
				</OrchestrationStep>

				<!-- Check if the user has selected to sign in using one of the social providers -->
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
						<ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
						<ClaimsExchange Id="IdentifyServerExchange" TechnicalProfileReferenceId="IdentityServer" />
						<ClaimsExchange Id="AdfsExchange" TechnicalProfileReferenceId="ADFS-WSFED-Outbound" />				
						<!-- ClaimsExchange Id="ReadAndCreateSsoSession" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId-CreateSubject" /-->
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- If social IDP authentication is used, then attempt to find the user account in the directory. -->
				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<!-- To cover existing SSO cookies with the old value -->
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>evoStsAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
          in the token. -->
				<OrchestrationStep Order="5" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>socialIdpAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user.
          So, in that case, create the user in the directory if one does not already exist (verified using objectId which would be set from the last
          step if account was created in the directory. -->
				<OrchestrationStep Order="6" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Phone verification: If MFA is not required, the next three steps (#5-#7) should be removed.
             This step checks whether there's a phone number on record,  for the user. If found, then the user is challenged to verify it. -->
				<OrchestrationStep Order="7" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>strongAuthenticationPhoneNumber</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- MFA step up: If there is no phone on record then the user must input a phone number so it can be added to the record. This is for 
             user accounts that might have been created before MFA was enabled, e.g. in migration scenarios, or where the application started 
             signing up the users without MFA, but decided to add it later.  -->
				<OrchestrationStep Order="8" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>strongAuthenticationPhoneNumber</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Save MFA phone number: The precondition verifies whether the user stepped up in the previous step. If so, then the phone number is stored
             in the directory for future authentication requests. -->
				<OrchestrationStep Order="9" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>executed-PhoneFactor-Input</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWritePhoneNumberUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Do Rest call -->
				<OrchestrationStep Order="10" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="LoyaltyRestExchange" TechnicalProfileReferenceId="LoyaltyRest" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<OrchestrationStep Order="11" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
			</OrchestrationSteps>
			<ClientDefinition ReferenceId="DefaultWeb" />
		</UserJourney>
		<UserJourney Id="SignUpOrSignInWithRest">
			<AssuranceLevel>LOA1</AssuranceLevel>
			<PreserveOriginalAssertion>false</PreserveOriginalAssertion>
			<OrchestrationSteps>
				<OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
					<ClaimsProviderSelections>
						<ClaimsProviderSelection TargetClaimsExchangeId="FacebookExchange" />
						<ClaimsProviderSelection TargetClaimsExchangeId="SignUpWithLogonEmailExchange" />
					</ClaimsProviderSelections>
				</OrchestrationStep>

				<!-- Check if the user has selected to sign in using one of the social providers -->
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
						<ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
						<!-- ClaimsExchange Id="ReadAndCreateSsoSession" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId-CreateSubject" /-->
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- If social IDP authentication is used, then attempt to find the user account in the directory. -->
				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>localAccountAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<!-- To cover existing SSO cookies with the old value -->
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>evoStsAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId). 
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent 
          in the token. -->
				<OrchestrationStep Order="5" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>authenticationSource</Value>
							<Value>socialIdpAuthentication</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user.
          So, in that case, create the user in the directory if one does not already exist (verified using objectId which would be set from the last
          step if account was created in the directory. -->
				<OrchestrationStep Order="6" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Phone verification: If MFA is not required, the next three steps (#5-#7) should be removed.
             This step checks whether there's a phone number on record,  for the user. If found, then the user is challenged to verify it. -->
				<OrchestrationStep Order="7" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>strongAuthenticationPhoneNumber</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- MFA step up: If there is no phone on record then the user must input a phone number so it can be added to the record. This is for 
             user accounts that might have been created before MFA was enabled, e.g. in migration scenarios, or where the application started 
             signing up the users without MFA, but decided to add it later.  -->
				<OrchestrationStep Order="8" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>strongAuthenticationPhoneNumber</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Save MFA phone number: The precondition verifies whether the user stepped up in the previous step. If so, then the phone number is stored
             in the directory for future authentication requests. -->
				<OrchestrationStep Order="9" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>executed-PhoneFactor-Input</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWritePhoneNumberUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<!-- Do conditional Rest call -->
				<OrchestrationStep Order="10" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>Loyalty</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="LoyaltyRestExchange" TechnicalProfileReferenceId="LoyaltyRest" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="11" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
			</OrchestrationSteps>
			<ClientDefinition ReferenceId="DefaultWeb" />
		</UserJourney>
	</UserJourneys>
</TrustFrameworkPolicy>
